# Into to Express

    # Initialize a new node project
        -npm init -y

        -npm install <dependencies>


# VOCABULARY

    # Route
        * an event listender for http requests

    #endpoint
    * "/item" "/user"

    #Port
     * localhost:9000/


# Nodemon
    * npm install -g nodemon


# Intro to REST API architecture

# REST - representational State Transfer

# Resource - Single item (object) in a database
 /user/98fjhk213341jk321

# Collection - a collection of similar items in a database
/users

# Base (root) URL - http://amazon.com/

# API endpoint = http://amazon.com/movies/fh32432he4328

# Paramters - /movies/:movieId

# Query (query string) - /movies?genre=action&year=1999

# Client - Frontend

# Server - Intermediary

# Request Method -  CRUD - GET POST PUT DELETE

# Middleware - a function that fires on the inbetween

# Requst Body (req.body)

# UUID - creates unique Ids
    -npm install uuid


# Require - A function, (import)

# Module.exports - (export)

# URL Parameters

# pars of the URL
    * Base - http://amazon.com
    * Endpoint - http://amazon.com/images
    * Parameter - http://amazon.com/images/fd83428gr23
    * Query - 

# URL Queries
    # Query Strings - (typically to filter results)
        * Begins with the "?"
        * Built of key=value pairs
        * Multiple queries of separated by the "&".

# Middleware

# What is it?
 * app.use()
    1.(optional) - Mount Path (endpoint)
    2.Callback function - receives the request, response objects, also the 'next' function

# the "next" funciton
    * Moves on to the middleware in line on our server


# console errors in expess

    # use a logger
        *npm install morgan


# connecting the front-end to the back-end

    # folder structure
    # Proxy

 # Status Codes

    # 200 -  Successful Request
    # 201 -  Successful Inset / Successful updated
    # 401 -  unauthorized
    # 404 -  Not found
    # 500 -  Server Error

https://http.cat

# Introduction to Mongoose

 # Purpose
    * Create models
    * Query data

# connect


# Mongoose Schemas
    * Blueprints for our data

# Mongoose Models
    * Models have a Name, and a Blueprint (Schema)
    * Models are used to perform the CRUD operations on data created with model



----------------

# one to one
# one to many
# many to many



----------------

# using github

# Git Collaboration

git branch

git checkout

git merge


# Start The Repo, clone master

1. Create git repository on github
2. connect/clone locally 
3. Set up the code base
    -git add -A
    -git commit -m "init commit"
    -git push
~~
4. clone the repository
    -git clone <posted command github>
5. Create a feature branch
    - git branch server-setup
6. Checkout to that branch
    - git checkout server-setup
7. Commit and push branch to github
    -git add -A
    -git commit -m "init commit"
    -git push
8. git checkout master
9. Pull down remote master
    -git pull
10. Checkout back to local branch
    - git checkout server-setup

11. merge local master into local branch
    - git merge --no--ff master
    - if goes well
        - shift + ZZ
    - if goes badly
        - resolve conflicts locally
12. push branch to github
    - git add -A
    - git commit -m "init commit"
    - git push
13. Create PR on github
14. Git checkout to master & git pull

